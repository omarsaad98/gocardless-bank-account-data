# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GocardlessBankaccountdataDetailSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'iban': 'str',
        'bban': 'str',
        'scan': 'str',
        'msisdn': 'str',
        'currency': 'str',
        'owner_name': 'str',
        'name': 'str',
        'display_name': 'str',
        'product': 'str',
        'cash_account_type': 'str',
        'status': 'str',
        'bic': 'str',
        'linked_accounts': 'str',
        'masked_pan': 'str',
        'usage': 'str',
        'details': 'str',
        'owner_address_unstructured': 'list[str]',
        'owner_address_structured': 'GocardlessBankaccountdataAllOfDetailSchemaGocardlessBankaccountdataOwnerAddressStructured'
    }

    attribute_map = {
        'resource_id': 'resourceId',
        'iban': 'iban',
        'bban': 'bban',
        'scan': 'scan',
        'msisdn': 'msisdn',
        'currency': 'currency',
        'owner_name': 'ownerName',
        'name': 'name',
        'display_name': 'displayName',
        'product': 'product',
        'cash_account_type': 'cashAccountType',
        'status': 'status',
        'bic': 'bic',
        'linked_accounts': 'linkedAccounts',
        'masked_pan': 'maskedPan',
        'usage': 'usage',
        'details': 'details',
        'owner_address_unstructured': 'ownerAddressUnstructured',
        'owner_address_structured': 'ownerAddressStructured'
    }

    def __init__(self, resource_id=None, iban=None, bban=None, scan=None, msisdn=None, currency=None, owner_name=None, name=None, display_name=None, product=None, cash_account_type=None, status=None, bic=None, linked_accounts=None, masked_pan=None, usage=None, details=None, owner_address_unstructured=None, owner_address_structured=None):  # noqa: E501
        """GocardlessBankaccountdataDetailSchema - a model defined in Swagger"""  # noqa: E501
        self._resource_id = None
        self._iban = None
        self._bban = None
        self._scan = None
        self._msisdn = None
        self._currency = None
        self._owner_name = None
        self._name = None
        self._display_name = None
        self._product = None
        self._cash_account_type = None
        self._status = None
        self._bic = None
        self._linked_accounts = None
        self._masked_pan = None
        self._usage = None
        self._details = None
        self._owner_address_unstructured = None
        self._owner_address_structured = None
        self.discriminator = None
        if resource_id is not None:
            self.resource_id = resource_id
        if iban is not None:
            self.iban = iban
        if bban is not None:
            self.bban = bban
        if scan is not None:
            self.scan = scan
        if msisdn is not None:
            self.msisdn = msisdn
        if currency is not None:
            self.currency = currency
        if owner_name is not None:
            self.owner_name = owner_name
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if product is not None:
            self.product = product
        if cash_account_type is not None:
            self.cash_account_type = cash_account_type
        if status is not None:
            self.status = status
        if bic is not None:
            self.bic = bic
        if linked_accounts is not None:
            self.linked_accounts = linked_accounts
        if masked_pan is not None:
            self.masked_pan = masked_pan
        if usage is not None:
            self.usage = usage
        if details is not None:
            self.details = details
        if owner_address_unstructured is not None:
            self.owner_address_unstructured = owner_address_unstructured
        if owner_address_structured is not None:
            self.owner_address_structured = owner_address_structured

    @property
    def resource_id(self):
        """Gets the resource_id of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        resourceId  # noqa: E501

        :return: The resource_id of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this GocardlessBankaccountdataDetailSchema.

        resourceId  # noqa: E501

        :param resource_id: The resource_id of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def iban(self):
        """Gets the iban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        iban  # noqa: E501

        :return: The iban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this GocardlessBankaccountdataDetailSchema.

        iban  # noqa: E501

        :param iban: The iban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def bban(self):
        """Gets the bban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        bban  # noqa: E501

        :return: The bban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._bban

    @bban.setter
    def bban(self, bban):
        """Sets the bban of this GocardlessBankaccountdataDetailSchema.

        bban  # noqa: E501

        :param bban: The bban of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._bban = bban

    @property
    def scan(self):
        """Gets the scan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        SortCodeAccountNumber returned by some UK banks (6 digit Sort Code and 8 digit Account Number)  # noqa: E501

        :return: The scan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this GocardlessBankaccountdataDetailSchema.

        SortCodeAccountNumber returned by some UK banks (6 digit Sort Code and 8 digit Account Number)  # noqa: E501

        :param scan: The scan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._scan = scan

    @property
    def msisdn(self):
        """Gets the msisdn of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        msisdn  # noqa: E501

        :return: The msisdn of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this GocardlessBankaccountdataDetailSchema.

        msisdn  # noqa: E501

        :param msisdn: The msisdn of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._msisdn = msisdn

    @property
    def currency(self):
        """Gets the currency of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        currency  # noqa: E501

        :return: The currency of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GocardlessBankaccountdataDetailSchema.

        currency  # noqa: E501

        :param currency: The currency of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def owner_name(self):
        """Gets the owner_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        ownerName  # noqa: E501

        :return: The owner_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this GocardlessBankaccountdataDetailSchema.

        ownerName  # noqa: E501

        :param owner_name: The owner_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def name(self):
        """Gets the name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        name  # noqa: E501

        :return: The name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GocardlessBankaccountdataDetailSchema.

        name  # noqa: E501

        :param name: The name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        displayName  # noqa: E501

        :return: The display_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GocardlessBankaccountdataDetailSchema.

        displayName  # noqa: E501

        :param display_name: The display_name of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def product(self):
        """Gets the product of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        product  # noqa: E501

        :return: The product of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GocardlessBankaccountdataDetailSchema.

        product  # noqa: E501

        :param product: The product of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def cash_account_type(self):
        """Gets the cash_account_type of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        cashAccountType  # noqa: E501

        :return: The cash_account_type of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._cash_account_type

    @cash_account_type.setter
    def cash_account_type(self, cash_account_type):
        """Sets the cash_account_type of this GocardlessBankaccountdataDetailSchema.

        cashAccountType  # noqa: E501

        :param cash_account_type: The cash_account_type of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._cash_account_type = cash_account_type

    @property
    def status(self):
        """Gets the status of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        status  # noqa: E501

        :return: The status of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GocardlessBankaccountdataDetailSchema.

        status  # noqa: E501

        :param status: The status of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def bic(self):
        """Gets the bic of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        bic  # noqa: E501

        :return: The bic of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this GocardlessBankaccountdataDetailSchema.

        bic  # noqa: E501

        :param bic: The bic of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        linkedAccounts  # noqa: E501

        :return: The linked_accounts of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this GocardlessBankaccountdataDetailSchema.

        linkedAccounts  # noqa: E501

        :param linked_accounts: The linked_accounts of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._linked_accounts = linked_accounts

    @property
    def masked_pan(self):
        """Gets the masked_pan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        maskedPan  # noqa: E501

        :return: The masked_pan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this GocardlessBankaccountdataDetailSchema.

        maskedPan  # noqa: E501

        :param masked_pan: The masked_pan of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._masked_pan = masked_pan

    @property
    def usage(self):
        """Gets the usage of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        usage  # noqa: E501

        :return: The usage of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this GocardlessBankaccountdataDetailSchema.

        usage  # noqa: E501

        :param usage: The usage of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def details(self):
        """Gets the details of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        details  # noqa: E501

        :return: The details of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this GocardlessBankaccountdataDetailSchema.

        details  # noqa: E501

        :param details: The details of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def owner_address_unstructured(self):
        """Gets the owner_address_unstructured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        ownerAddressUnstructured  # noqa: E501

        :return: The owner_address_unstructured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_address_unstructured

    @owner_address_unstructured.setter
    def owner_address_unstructured(self, owner_address_unstructured):
        """Sets the owner_address_unstructured of this GocardlessBankaccountdataDetailSchema.

        ownerAddressUnstructured  # noqa: E501

        :param owner_address_unstructured: The owner_address_unstructured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: list[str]
        """

        self._owner_address_unstructured = owner_address_unstructured

    @property
    def owner_address_structured(self):
        """Gets the owner_address_structured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501

        ownerAddressStructured  # noqa: E501

        :return: The owner_address_structured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :rtype: GocardlessBankaccountdataAllOfDetailSchemaGocardlessBankaccountdataOwnerAddressStructured
        """
        return self._owner_address_structured

    @owner_address_structured.setter
    def owner_address_structured(self, owner_address_structured):
        """Sets the owner_address_structured of this GocardlessBankaccountdataDetailSchema.

        ownerAddressStructured  # noqa: E501

        :param owner_address_structured: The owner_address_structured of this GocardlessBankaccountdataDetailSchema.  # noqa: E501
        :type: GocardlessBankaccountdataAllOfDetailSchemaGocardlessBankaccountdataOwnerAddressStructured
        """

        self._owner_address_structured = owner_address_structured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GocardlessBankaccountdataDetailSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GocardlessBankaccountdataDetailSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
