# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GocardlessBankaccountdataAccountSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iban': 'str',
        'bban': 'str',
        'pan': 'str',
        'masked_pan': 'str',
        'msisdn': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'iban': 'iban',
        'bban': 'bban',
        'pan': 'pan',
        'masked_pan': 'maskedPan',
        'msisdn': 'msisdn',
        'currency': 'currency'
    }

    def __init__(self, iban=None, bban=None, pan=None, masked_pan=None, msisdn=None, currency=None):  # noqa: E501
        """GocardlessBankaccountdataAccountSchema - a model defined in Swagger"""  # noqa: E501
        self._iban = None
        self._bban = None
        self._pan = None
        self._masked_pan = None
        self._msisdn = None
        self._currency = None
        self.discriminator = None
        if iban is not None:
            self.iban = iban
        if bban is not None:
            self.bban = bban
        if pan is not None:
            self.pan = pan
        if masked_pan is not None:
            self.masked_pan = masked_pan
        if msisdn is not None:
            self.msisdn = msisdn
        if currency is not None:
            self.currency = currency

    @property
    def iban(self):
        """Gets the iban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        iban  # noqa: E501

        :return: The iban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this GocardlessBankaccountdataAccountSchema.

        iban  # noqa: E501

        :param iban: The iban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def bban(self):
        """Gets the bban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        bban  # noqa: E501

        :return: The bban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._bban

    @bban.setter
    def bban(self, bban):
        """Sets the bban of this GocardlessBankaccountdataAccountSchema.

        bban  # noqa: E501

        :param bban: The bban of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._bban = bban

    @property
    def pan(self):
        """Gets the pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        pan  # noqa: E501

        :return: The pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this GocardlessBankaccountdataAccountSchema.

        pan  # noqa: E501

        :param pan: The pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._pan = pan

    @property
    def masked_pan(self):
        """Gets the masked_pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        maskedPan  # noqa: E501

        :return: The masked_pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this GocardlessBankaccountdataAccountSchema.

        maskedPan  # noqa: E501

        :param masked_pan: The masked_pan of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._masked_pan = masked_pan

    @property
    def msisdn(self):
        """Gets the msisdn of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        msisdn  # noqa: E501

        :return: The msisdn of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this GocardlessBankaccountdataAccountSchema.

        msisdn  # noqa: E501

        :param msisdn: The msisdn of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._msisdn = msisdn

    @property
    def currency(self):
        """Gets the currency of this GocardlessBankaccountdataAccountSchema.  # noqa: E501

        currency  # noqa: E501

        :return: The currency of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GocardlessBankaccountdataAccountSchema.

        currency  # noqa: E501

        :param currency: The currency of this GocardlessBankaccountdataAccountSchema.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GocardlessBankaccountdataAccountSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GocardlessBankaccountdataAccountSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
