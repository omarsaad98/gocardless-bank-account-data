# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GocardlessBankaccountdataRequisitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redirect': 'str',
        'institution_id': 'str',
        'agreement': 'str',
        'reference': 'str',
        'user_language': 'str',
        'ssn': 'str',
        'account_selection': 'bool',
        'redirect_immediate': 'bool'
    }

    attribute_map = {
        'redirect': 'redirect',
        'institution_id': 'institution_id',
        'agreement': 'agreement',
        'reference': 'reference',
        'user_language': 'user_language',
        'ssn': 'ssn',
        'account_selection': 'account_selection',
        'redirect_immediate': 'redirect_immediate'
    }

    def __init__(self, redirect=None, institution_id=None, agreement=None, reference=None, user_language=None, ssn=None, account_selection=False, redirect_immediate=False):  # noqa: E501
        """GocardlessBankaccountdataRequisitionRequest - a model defined in Swagger"""  # noqa: E501
        self._redirect = None
        self._institution_id = None
        self._agreement = None
        self._reference = None
        self._user_language = None
        self._ssn = None
        self._account_selection = None
        self._redirect_immediate = None
        self.discriminator = None
        self.redirect = redirect
        self.institution_id = institution_id
        if agreement is not None:
            self.agreement = agreement
        if reference is not None:
            self.reference = reference
        if user_language is not None:
            self.user_language = user_language
        if ssn is not None:
            self.ssn = ssn
        if account_selection is not None:
            self.account_selection = account_selection
        if redirect_immediate is not None:
            self.redirect_immediate = redirect_immediate

    @property
    def redirect(self):
        """Gets the redirect of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        redirect URL to your application after end-user authorization with ASPSP  # noqa: E501

        :return: The redirect of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this GocardlessBankaccountdataRequisitionRequest.

        redirect URL to your application after end-user authorization with ASPSP  # noqa: E501

        :param redirect: The redirect of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")  # noqa: E501

        self._redirect = redirect

    @property
    def institution_id(self):
        """Gets the institution_id of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        an Institution ID for this Requisition  # noqa: E501

        :return: The institution_id of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this GocardlessBankaccountdataRequisitionRequest.

        an Institution ID for this Requisition  # noqa: E501

        :param institution_id: The institution_id of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")  # noqa: E501

        self._institution_id = institution_id

    @property
    def agreement(self):
        """Gets the agreement of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        EUA associated with this requisition  # noqa: E501

        :return: The agreement of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this GocardlessBankaccountdataRequisitionRequest.

        EUA associated with this requisition  # noqa: E501

        :param agreement: The agreement of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """

        self._agreement = agreement

    @property
    def reference(self):
        """Gets the reference of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        additional ID to identify the end user  # noqa: E501

        :return: The reference of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this GocardlessBankaccountdataRequisitionRequest.

        additional ID to identify the end user  # noqa: E501

        :param reference: The reference of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def user_language(self):
        """Gets the user_language of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        A two-letter country code (ISO 639-1)  # noqa: E501

        :return: The user_language of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_language

    @user_language.setter
    def user_language(self, user_language):
        """Sets the user_language of this GocardlessBankaccountdataRequisitionRequest.

        A two-letter country code (ISO 639-1)  # noqa: E501

        :param user_language: The user_language of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """

        self._user_language = user_language

    @property
    def ssn(self):
        """Gets the ssn of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        optional SSN field to verify ownership of the account  # noqa: E501

        :return: The ssn of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this GocardlessBankaccountdataRequisitionRequest.

        optional SSN field to verify ownership of the account  # noqa: E501

        :param ssn: The ssn of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: str
        """

        self._ssn = ssn

    @property
    def account_selection(self):
        """Gets the account_selection of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        option to enable account selection view for the end user  # noqa: E501

        :return: The account_selection of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._account_selection

    @account_selection.setter
    def account_selection(self, account_selection):
        """Sets the account_selection of this GocardlessBankaccountdataRequisitionRequest.

        option to enable account selection view for the end user  # noqa: E501

        :param account_selection: The account_selection of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: bool
        """

        self._account_selection = account_selection

    @property
    def redirect_immediate(self):
        """Gets the redirect_immediate of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501

        enable redirect back to the client after account list received  # noqa: E501

        :return: The redirect_immediate of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._redirect_immediate

    @redirect_immediate.setter
    def redirect_immediate(self, redirect_immediate):
        """Sets the redirect_immediate of this GocardlessBankaccountdataRequisitionRequest.

        enable redirect back to the client after account list received  # noqa: E501

        :param redirect_immediate: The redirect_immediate of this GocardlessBankaccountdataRequisitionRequest.  # noqa: E501
        :type: bool
        """

        self._redirect_immediate = redirect_immediate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GocardlessBankaccountdataRequisitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GocardlessBankaccountdataRequisitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
