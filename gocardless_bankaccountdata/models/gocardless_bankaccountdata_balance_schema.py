# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GocardlessBankaccountdataBalanceSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_amount': 'GocardlessBankaccountdataAllOfBalanceSchemaGocardlessBankaccountdataBalanceAmount',
        'balance_type': 'str',
        'credit_limit_included': 'bool',
        'last_change_date_time': 'str',
        'reference_date': 'str',
        'last_committed_transaction': 'str'
    }

    attribute_map = {
        'balance_amount': 'balanceAmount',
        'balance_type': 'balanceType',
        'credit_limit_included': 'creditLimitIncluded',
        'last_change_date_time': 'lastChangeDateTime',
        'reference_date': 'referenceDate',
        'last_committed_transaction': 'lastCommittedTransaction'
    }

    def __init__(self, balance_amount=None, balance_type=None, credit_limit_included=None, last_change_date_time=None, reference_date=None, last_committed_transaction=None):  # noqa: E501
        """GocardlessBankaccountdataBalanceSchema - a model defined in Swagger"""  # noqa: E501
        self._balance_amount = None
        self._balance_type = None
        self._credit_limit_included = None
        self._last_change_date_time = None
        self._reference_date = None
        self._last_committed_transaction = None
        self.discriminator = None
        self.balance_amount = balance_amount
        self.balance_type = balance_type
        if credit_limit_included is not None:
            self.credit_limit_included = credit_limit_included
        if last_change_date_time is not None:
            self.last_change_date_time = last_change_date_time
        if reference_date is not None:
            self.reference_date = reference_date
        if last_committed_transaction is not None:
            self.last_committed_transaction = last_committed_transaction

    @property
    def balance_amount(self):
        """Gets the balance_amount of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        balanceAmount  # noqa: E501

        :return: The balance_amount of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: GocardlessBankaccountdataAllOfBalanceSchemaGocardlessBankaccountdataBalanceAmount
        """
        return self._balance_amount

    @balance_amount.setter
    def balance_amount(self, balance_amount):
        """Sets the balance_amount of this GocardlessBankaccountdataBalanceSchema.

        balanceAmount  # noqa: E501

        :param balance_amount: The balance_amount of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: GocardlessBankaccountdataAllOfBalanceSchemaGocardlessBankaccountdataBalanceAmount
        """
        if balance_amount is None:
            raise ValueError("Invalid value for `balance_amount`, must not be `None`")  # noqa: E501

        self._balance_amount = balance_amount

    @property
    def balance_type(self):
        """Gets the balance_type of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        balanceType  # noqa: E501

        :return: The balance_type of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this GocardlessBankaccountdataBalanceSchema.

        balanceType  # noqa: E501

        :param balance_type: The balance_type of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: str
        """
        if balance_type is None:
            raise ValueError("Invalid value for `balance_type`, must not be `None`")  # noqa: E501

        self._balance_type = balance_type

    @property
    def credit_limit_included(self):
        """Gets the credit_limit_included of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        creditLimitIncluded  # noqa: E501

        :return: The credit_limit_included of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: bool
        """
        return self._credit_limit_included

    @credit_limit_included.setter
    def credit_limit_included(self, credit_limit_included):
        """Sets the credit_limit_included of this GocardlessBankaccountdataBalanceSchema.

        creditLimitIncluded  # noqa: E501

        :param credit_limit_included: The credit_limit_included of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: bool
        """

        self._credit_limit_included = credit_limit_included

    @property
    def last_change_date_time(self):
        """Gets the last_change_date_time of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        lastChangeDateTime  # noqa: E501

        :return: The last_change_date_time of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: str
        """
        return self._last_change_date_time

    @last_change_date_time.setter
    def last_change_date_time(self, last_change_date_time):
        """Sets the last_change_date_time of this GocardlessBankaccountdataBalanceSchema.

        lastChangeDateTime  # noqa: E501

        :param last_change_date_time: The last_change_date_time of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: str
        """

        self._last_change_date_time = last_change_date_time

    @property
    def reference_date(self):
        """Gets the reference_date of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        referenceDate  # noqa: E501

        :return: The reference_date of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: str
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this GocardlessBankaccountdataBalanceSchema.

        referenceDate  # noqa: E501

        :param reference_date: The reference_date of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: str
        """

        self._reference_date = reference_date

    @property
    def last_committed_transaction(self):
        """Gets the last_committed_transaction of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501

        lastCommittedTransaction  # noqa: E501

        :return: The last_committed_transaction of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :rtype: str
        """
        return self._last_committed_transaction

    @last_committed_transaction.setter
    def last_committed_transaction(self, last_committed_transaction):
        """Sets the last_committed_transaction of this GocardlessBankaccountdataBalanceSchema.

        lastCommittedTransaction  # noqa: E501

        :param last_committed_transaction: The last_committed_transaction of this GocardlessBankaccountdataBalanceSchema.  # noqa: E501
        :type: str
        """

        self._last_committed_transaction = last_committed_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GocardlessBankaccountdataBalanceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GocardlessBankaccountdataBalanceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
