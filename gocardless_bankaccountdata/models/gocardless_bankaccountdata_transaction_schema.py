# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GocardlessBankaccountdataTransactionSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'entry_reference': 'str',
        'end_to_end_id': 'str',
        'mandate_id': 'str',
        'check_id': 'str',
        'creditor_id': 'str',
        'booking_date': 'str',
        'value_date': 'str',
        'booking_date_time': 'str',
        'value_date_time': 'str',
        'transaction_amount': 'GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataTransactionAmount',
        'currency_exchange': 'list[GocardlessBankaccountdataCurrencyExchangeSchema]',
        'creditor_name': 'str',
        'creditor_account': 'GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataCreditorAccount',
        'ultimate_creditor': 'str',
        'debtor_name': 'str',
        'debtor_account': 'GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataDebtorAccount',
        'ultimate_debtor': 'str',
        'remittance_information_unstructured': 'str',
        'remittance_information_unstructured_array': 'list[str]',
        'remittance_information_structured': 'str',
        'remittance_information_structured_array': 'list[str]',
        'additional_information': 'str',
        'purpose_code': 'str',
        'bank_transaction_code': 'str',
        'proprietary_bank_transaction_code': 'str',
        'internal_transaction_id': 'str'
    }

    attribute_map = {
        'transaction_id': 'transactionId',
        'entry_reference': 'entryReference',
        'end_to_end_id': 'endToEndId',
        'mandate_id': 'mandateId',
        'check_id': 'checkId',
        'creditor_id': 'creditorId',
        'booking_date': 'bookingDate',
        'value_date': 'valueDate',
        'booking_date_time': 'bookingDateTime',
        'value_date_time': 'valueDateTime',
        'transaction_amount': 'transactionAmount',
        'currency_exchange': 'currencyExchange',
        'creditor_name': 'creditorName',
        'creditor_account': 'creditorAccount',
        'ultimate_creditor': 'ultimateCreditor',
        'debtor_name': 'debtorName',
        'debtor_account': 'debtorAccount',
        'ultimate_debtor': 'ultimateDebtor',
        'remittance_information_unstructured': 'remittanceInformationUnstructured',
        'remittance_information_unstructured_array': 'remittanceInformationUnstructuredArray',
        'remittance_information_structured': 'remittanceInformationStructured',
        'remittance_information_structured_array': 'remittanceInformationStructuredArray',
        'additional_information': 'additionalInformation',
        'purpose_code': 'purposeCode',
        'bank_transaction_code': 'bankTransactionCode',
        'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode',
        'internal_transaction_id': 'internalTransactionId'
    }

    def __init__(self, transaction_id=None, entry_reference=None, end_to_end_id=None, mandate_id=None, check_id=None, creditor_id=None, booking_date=None, value_date=None, booking_date_time=None, value_date_time=None, transaction_amount=None, currency_exchange=None, creditor_name=None, creditor_account=None, ultimate_creditor=None, debtor_name=None, debtor_account=None, ultimate_debtor=None, remittance_information_unstructured=None, remittance_information_unstructured_array=None, remittance_information_structured=None, remittance_information_structured_array=None, additional_information=None, purpose_code=None, bank_transaction_code=None, proprietary_bank_transaction_code=None, internal_transaction_id=None):  # noqa: E501
        """GocardlessBankaccountdataTransactionSchema - a model defined in Swagger"""  # noqa: E501
        self._transaction_id = None
        self._entry_reference = None
        self._end_to_end_id = None
        self._mandate_id = None
        self._check_id = None
        self._creditor_id = None
        self._booking_date = None
        self._value_date = None
        self._booking_date_time = None
        self._value_date_time = None
        self._transaction_amount = None
        self._currency_exchange = None
        self._creditor_name = None
        self._creditor_account = None
        self._ultimate_creditor = None
        self._debtor_name = None
        self._debtor_account = None
        self._ultimate_debtor = None
        self._remittance_information_unstructured = None
        self._remittance_information_unstructured_array = None
        self._remittance_information_structured = None
        self._remittance_information_structured_array = None
        self._additional_information = None
        self._purpose_code = None
        self._bank_transaction_code = None
        self._proprietary_bank_transaction_code = None
        self._internal_transaction_id = None
        self.discriminator = None
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if entry_reference is not None:
            self.entry_reference = entry_reference
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        if mandate_id is not None:
            self.mandate_id = mandate_id
        if check_id is not None:
            self.check_id = check_id
        if creditor_id is not None:
            self.creditor_id = creditor_id
        if booking_date is not None:
            self.booking_date = booking_date
        if value_date is not None:
            self.value_date = value_date
        if booking_date_time is not None:
            self.booking_date_time = booking_date_time
        if value_date_time is not None:
            self.value_date_time = value_date_time
        self.transaction_amount = transaction_amount
        if currency_exchange is not None:
            self.currency_exchange = currency_exchange
        if creditor_name is not None:
            self.creditor_name = creditor_name
        if creditor_account is not None:
            self.creditor_account = creditor_account
        if ultimate_creditor is not None:
            self.ultimate_creditor = ultimate_creditor
        if debtor_name is not None:
            self.debtor_name = debtor_name
        if debtor_account is not None:
            self.debtor_account = debtor_account
        if ultimate_debtor is not None:
            self.ultimate_debtor = ultimate_debtor
        if remittance_information_unstructured is not None:
            self.remittance_information_unstructured = remittance_information_unstructured
        if remittance_information_unstructured_array is not None:
            self.remittance_information_unstructured_array = remittance_information_unstructured_array
        if remittance_information_structured is not None:
            self.remittance_information_structured = remittance_information_structured
        if remittance_information_structured_array is not None:
            self.remittance_information_structured_array = remittance_information_structured_array
        if additional_information is not None:
            self.additional_information = additional_information
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if bank_transaction_code is not None:
            self.bank_transaction_code = bank_transaction_code
        if proprietary_bank_transaction_code is not None:
            self.proprietary_bank_transaction_code = proprietary_bank_transaction_code
        if internal_transaction_id is not None:
            self.internal_transaction_id = internal_transaction_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        transactionId  # noqa: E501

        :return: The transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GocardlessBankaccountdataTransactionSchema.

        transactionId  # noqa: E501

        :param transaction_id: The transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def entry_reference(self):
        """Gets the entry_reference of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        entryReference  # noqa: E501

        :return: The entry_reference of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._entry_reference

    @entry_reference.setter
    def entry_reference(self, entry_reference):
        """Sets the entry_reference of this GocardlessBankaccountdataTransactionSchema.

        entryReference  # noqa: E501

        :param entry_reference: The entry_reference of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._entry_reference = entry_reference

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        endToEndId  # noqa: E501

        :return: The end_to_end_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this GocardlessBankaccountdataTransactionSchema.

        endToEndId  # noqa: E501

        :param end_to_end_id: The end_to_end_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def mandate_id(self):
        """Gets the mandate_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        mandateId  # noqa: E501

        :return: The mandate_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this GocardlessBankaccountdataTransactionSchema.

        mandateId  # noqa: E501

        :param mandate_id: The mandate_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    @property
    def check_id(self):
        """Gets the check_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        checkId  # noqa: E501

        :return: The check_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this GocardlessBankaccountdataTransactionSchema.

        checkId  # noqa: E501

        :param check_id: The check_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._check_id = check_id

    @property
    def creditor_id(self):
        """Gets the creditor_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        creditorId  # noqa: E501

        :return: The creditor_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this GocardlessBankaccountdataTransactionSchema.

        creditorId  # noqa: E501

        :param creditor_id: The creditor_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._creditor_id = creditor_id

    @property
    def booking_date(self):
        """Gets the booking_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        bookingDate  # noqa: E501

        :return: The booking_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this GocardlessBankaccountdataTransactionSchema.

        bookingDate  # noqa: E501

        :param booking_date: The booking_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._booking_date = booking_date

    @property
    def value_date(self):
        """Gets the value_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        valueDate  # noqa: E501

        :return: The value_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this GocardlessBankaccountdataTransactionSchema.

        valueDate  # noqa: E501

        :param value_date: The value_date of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._value_date = value_date

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        bookingDateTime  # noqa: E501

        :return: The booking_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this GocardlessBankaccountdataTransactionSchema.

        bookingDateTime  # noqa: E501

        :param booking_date_time: The booking_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._booking_date_time = booking_date_time

    @property
    def value_date_time(self):
        """Gets the value_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        valueDateTime  # noqa: E501

        :return: The value_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this GocardlessBankaccountdataTransactionSchema.

        valueDateTime  # noqa: E501

        :param value_date_time: The value_date_time of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._value_date_time = value_date_time

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        transactionAmount  # noqa: E501

        :return: The transaction_amount of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataTransactionAmount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this GocardlessBankaccountdataTransactionSchema.

        transactionAmount  # noqa: E501

        :param transaction_amount: The transaction_amount of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataTransactionAmount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501


        :return: The currency_exchange of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: list[GocardlessBankaccountdataCurrencyExchangeSchema]
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this GocardlessBankaccountdataTransactionSchema.


        :param currency_exchange: The currency_exchange of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: list[GocardlessBankaccountdataCurrencyExchangeSchema]
        """

        self._currency_exchange = currency_exchange

    @property
    def creditor_name(self):
        """Gets the creditor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        creditorName  # noqa: E501

        :return: The creditor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this GocardlessBankaccountdataTransactionSchema.

        creditorName  # noqa: E501

        :param creditor_name: The creditor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._creditor_name = creditor_name

    @property
    def creditor_account(self):
        """Gets the creditor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        creditorAccount  # noqa: E501

        :return: The creditor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataCreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this GocardlessBankaccountdataTransactionSchema.

        creditorAccount  # noqa: E501

        :param creditor_account: The creditor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataCreditorAccount
        """

        self._creditor_account = creditor_account

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        ultimateCreditor  # noqa: E501

        :return: The ultimate_creditor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this GocardlessBankaccountdataTransactionSchema.

        ultimateCreditor  # noqa: E501

        :param ultimate_creditor: The ultimate_creditor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._ultimate_creditor = ultimate_creditor

    @property
    def debtor_name(self):
        """Gets the debtor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        debtorName  # noqa: E501

        :return: The debtor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this GocardlessBankaccountdataTransactionSchema.

        debtorName  # noqa: E501

        :param debtor_name: The debtor_name of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._debtor_name = debtor_name

    @property
    def debtor_account(self):
        """Gets the debtor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        debtorAccount  # noqa: E501

        :return: The debtor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataDebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this GocardlessBankaccountdataTransactionSchema.

        debtorAccount  # noqa: E501

        :param debtor_account: The debtor_account of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: GocardlessBankaccountdataAllOfTransactionSchemaGocardlessBankaccountdataDebtorAccount
        """

        self._debtor_account = debtor_account

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        ultimateDebtor  # noqa: E501

        :return: The ultimate_debtor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this GocardlessBankaccountdataTransactionSchema.

        ultimateDebtor  # noqa: E501

        :param ultimate_debtor: The ultimate_debtor of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._ultimate_debtor = ultimate_debtor

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        remittanceInformationUnstructured  # noqa: E501

        :return: The remittance_information_unstructured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this GocardlessBankaccountdataTransactionSchema.

        remittanceInformationUnstructured  # noqa: E501

        :param remittance_information_unstructured: The remittance_information_unstructured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_unstructured_array(self):
        """Gets the remittance_information_unstructured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        remittanceInformationUnstructuredArray  # noqa: E501

        :return: The remittance_information_unstructured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._remittance_information_unstructured_array

    @remittance_information_unstructured_array.setter
    def remittance_information_unstructured_array(self, remittance_information_unstructured_array):
        """Sets the remittance_information_unstructured_array of this GocardlessBankaccountdataTransactionSchema.

        remittanceInformationUnstructuredArray  # noqa: E501

        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: list[str]
        """

        self._remittance_information_unstructured_array = remittance_information_unstructured_array

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        remittanceInformationStructured  # noqa: E501

        :return: The remittance_information_structured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this GocardlessBankaccountdataTransactionSchema.

        remittanceInformationStructured  # noqa: E501

        :param remittance_information_structured: The remittance_information_structured of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_structured_array(self):
        """Gets the remittance_information_structured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        remittanceInformationStructuredArray  # noqa: E501

        :return: The remittance_information_structured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._remittance_information_structured_array

    @remittance_information_structured_array.setter
    def remittance_information_structured_array(self, remittance_information_structured_array):
        """Sets the remittance_information_structured_array of this GocardlessBankaccountdataTransactionSchema.

        remittanceInformationStructuredArray  # noqa: E501

        :param remittance_information_structured_array: The remittance_information_structured_array of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: list[str]
        """

        self._remittance_information_structured_array = remittance_information_structured_array

    @property
    def additional_information(self):
        """Gets the additional_information of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        additionalInformation  # noqa: E501

        :return: The additional_information of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this GocardlessBankaccountdataTransactionSchema.

        additionalInformation  # noqa: E501

        :param additional_information: The additional_information of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def purpose_code(self):
        """Gets the purpose_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        purposeCode  # noqa: E501

        :return: The purpose_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this GocardlessBankaccountdataTransactionSchema.

        purposeCode  # noqa: E501

        :param purpose_code: The purpose_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._purpose_code = purpose_code

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        bankTransactionCode  # noqa: E501

        :return: The bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.

        bankTransactionCode  # noqa: E501

        :param bank_transaction_code: The bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._bank_transaction_code = bank_transaction_code

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        proprietaryBankTransactionCode  # noqa: E501

        :return: The proprietary_bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.

        proprietaryBankTransactionCode  # noqa: E501

        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def internal_transaction_id(self):
        """Gets the internal_transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501

        internalTransactionId  # noqa: E501

        :return: The internal_transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :rtype: str
        """
        return self._internal_transaction_id

    @internal_transaction_id.setter
    def internal_transaction_id(self, internal_transaction_id):
        """Sets the internal_transaction_id of this GocardlessBankaccountdataTransactionSchema.

        internalTransactionId  # noqa: E501

        :param internal_transaction_id: The internal_transaction_id of this GocardlessBankaccountdataTransactionSchema.  # noqa: E501
        :type: str
        """

        self._internal_transaction_id = internal_transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GocardlessBankaccountdataTransactionSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GocardlessBankaccountdataTransactionSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
