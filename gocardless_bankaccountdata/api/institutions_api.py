# coding: utf-8

"""
    GoCardless Bank Account Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0 (v2)
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gocardless_bankaccountdata.api_client import ApiClient


class InstitutionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def retrieve_all_supported_institutions_in_a_given_country(self, **kwargs):  # noqa: E501
        """retrieve_all_supported_institutions_in_a_given_country  # noqa: E501

        List all available institutions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_supported_institutions_in_a_given_country(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_scopes_supported: Boolean value, indicating if access scopes are supported
        :param str account_selection_supported: Boolean value, indicating if account selection is supported
        :param str business_accounts_supported: Boolean value, indicating if business accounts are supported
        :param str card_accounts_supported: Boolean value, indicating if card accounts are supported
        :param str corporate_accounts_supported: Boolean value, indicating if corporate accounts are supported
        :param str country: ISO 3166 two-character country code
        :param str payment_submission_supported: Boolean value, indicating if payment submission is supported
        :param str payments_enabled: Boolean value, indicating if payments are supported
        :param str pending_transactions_supported: Boolean value, indicating if pending transactions are supported
        :param str private_accounts_supported: Boolean value, indicating if private accounts are supported
        :param str read_debtor_account_supported: Boolean value, indicating if debtor account can be read before submitting payment
        :param str read_refund_account_supported: Boolean value, indicating if read refund account is supported
        :param str ssn_verification_supported: Boolean value, indicating if ssn verification is supported
        :return: list[GocardlessBankaccountdataIntegration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_supported_institutions_in_a_given_country_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_supported_institutions_in_a_given_country_with_http_info(**kwargs)  # noqa: E501
            return data

    def retrieve_all_supported_institutions_in_a_given_country_with_http_info(self, **kwargs):  # noqa: E501
        """retrieve_all_supported_institutions_in_a_given_country  # noqa: E501

        List all available institutions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_supported_institutions_in_a_given_country_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access_scopes_supported: Boolean value, indicating if access scopes are supported
        :param str account_selection_supported: Boolean value, indicating if account selection is supported
        :param str business_accounts_supported: Boolean value, indicating if business accounts are supported
        :param str card_accounts_supported: Boolean value, indicating if card accounts are supported
        :param str corporate_accounts_supported: Boolean value, indicating if corporate accounts are supported
        :param str country: ISO 3166 two-character country code
        :param str payment_submission_supported: Boolean value, indicating if payment submission is supported
        :param str payments_enabled: Boolean value, indicating if payments are supported
        :param str pending_transactions_supported: Boolean value, indicating if pending transactions are supported
        :param str private_accounts_supported: Boolean value, indicating if private accounts are supported
        :param str read_debtor_account_supported: Boolean value, indicating if debtor account can be read before submitting payment
        :param str read_refund_account_supported: Boolean value, indicating if read refund account is supported
        :param str ssn_verification_supported: Boolean value, indicating if ssn verification is supported
        :return: list[GocardlessBankaccountdataIntegration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_scopes_supported', 'account_selection_supported', 'business_accounts_supported', 'card_accounts_supported', 'corporate_accounts_supported', 'country', 'payment_submission_supported', 'payments_enabled', 'pending_transactions_supported', 'private_accounts_supported', 'read_debtor_account_supported', 'read_refund_account_supported', 'ssn_verification_supported']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_supported_institutions_in_a_given_country" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access_scopes_supported' in params:
            query_params.append(('access_scopes_supported', params['access_scopes_supported']))  # noqa: E501
        if 'account_selection_supported' in params:
            query_params.append(('account_selection_supported', params['account_selection_supported']))  # noqa: E501
        if 'business_accounts_supported' in params:
            query_params.append(('business_accounts_supported', params['business_accounts_supported']))  # noqa: E501
        if 'card_accounts_supported' in params:
            query_params.append(('card_accounts_supported', params['card_accounts_supported']))  # noqa: E501
        if 'corporate_accounts_supported' in params:
            query_params.append(('corporate_accounts_supported', params['corporate_accounts_supported']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'payment_submission_supported' in params:
            query_params.append(('payment_submission_supported', params['payment_submission_supported']))  # noqa: E501
        if 'payments_enabled' in params:
            query_params.append(('payments_enabled', params['payments_enabled']))  # noqa: E501
        if 'pending_transactions_supported' in params:
            query_params.append(('pending_transactions_supported', params['pending_transactions_supported']))  # noqa: E501
        if 'private_accounts_supported' in params:
            query_params.append(('private_accounts_supported', params['private_accounts_supported']))  # noqa: E501
        if 'read_debtor_account_supported' in params:
            query_params.append(('read_debtor_account_supported', params['read_debtor_account_supported']))  # noqa: E501
        if 'read_refund_account_supported' in params:
            query_params.append(('read_refund_account_supported', params['read_refund_account_supported']))  # noqa: E501
        if 'ssn_verification_supported' in params:
            query_params.append(('ssn_verification_supported', params['ssn_verification_supported']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/institutions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GocardlessBankaccountdataIntegration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_institution(self, id, **kwargs):  # noqa: E501
        """retrieve_institution  # noqa: E501

        Get details about a specific Institution and its supported features  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_institution(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: GocardlessBankaccountdataIntegrationRetrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_institution_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_institution_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_institution_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_institution  # noqa: E501

        Get details about a specific Institution and its supported features  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_institution_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: GocardlessBankaccountdataIntegrationRetrieve
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_institution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_institution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/institutions/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GocardlessBankaccountdataIntegrationRetrieve',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
